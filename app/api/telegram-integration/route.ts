import { type NextRequest, NextResponse } from "next/server"

// Complete Telegram Bot integration endpoint
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { action, ...params } = body

    switch (action) {
      case "text_to_speech":
        return await handleTextToSpeech(request, params)
      case "speech_to_text":
        return await handleSpeechToText(request, params)
      case "webhook":
        return await handleTelegramWebhook(request, params)
      default:
        return NextResponse.json({ error: "Invalid action" }, { status: 400 })
    }
  } catch (error) {
    console.error("Telegram Integration Error:", error)
    return NextResponse.json({ error: "Integration failed" }, { status: 500 })
  }
}

async function handleTextToSpeech(request: NextRequest, params: any) {
  const { text, chat_id, bot_token, voice = "en-US", format = "mp3" } = params

  if (!text || !chat_id || !bot_token) {
    return NextResponse.json(
      {
        error: "Missing required parameters: text, chat_id, bot_token",
      },
      { status: 400 },
    )
  }

  try {
    // Generate speech audio
    const audioResponse = await fetch(`${request.url.replace("/telegram-integration", "/tts-real")}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text, voice, format }),
    })

    if (!audioResponse.ok) {
      throw new Error("Failed to generate audio")
    }

    const audioBuffer = await audioResponse.arrayBuffer()

    // Send to Telegram
    const formData = new FormData()
    formData.append("chat_id", chat_id)
    formData.append("audio", new Blob([audioBuffer], { type: `audio/${format}` }), `speech.${format}`)
    formData.append("caption", "ðŸŽµ Generated by FreeTTS")

    const telegramResponse = await fetch(`https://api.telegram.org/bot${bot_token}/sendAudio`, {
      method: "POST",
      body: formData,
    })

    const result = await telegramResponse.json()

    return NextResponse.json({
      success: true,
      message: "Audio sent to Telegram successfully",
      telegram_response: result,
    })
  } catch (error) {
    return NextResponse.json(
      {
        error: "Failed to send audio to Telegram",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}

async function handleSpeechToText(request: NextRequest, params: any) {
  const { file_id, bot_token, chat_id } = params

  if (!file_id || !bot_token) {
    return NextResponse.json(
      {
        error: "Missing required parameters: file_id, bot_token",
      },
      { status: 400 },
    )
  }

  try {
    // Get file info from Telegram
    const fileInfoResponse = await fetch(`https://api.telegram.org/bot${bot_token}/getFile?file_id=${file_id}`)
    const fileInfo = await fileInfoResponse.json()

    if (!fileInfo.ok) {
      throw new Error("Failed to get file info from Telegram")
    }

    // Download audio file
    const audioResponse = await fetch(`https://api.telegram.org/file/bot${bot_token}/${fileInfo.result.file_path}`)
    const audioBuffer = await audioResponse.arrayBuffer()

    // Convert to text
    const sttResponse = await fetch(`${request.url.replace("/telegram-integration", "/stt-telegram")}`, {
      method: "POST",
      headers: { "Content-Type": "audio/mpeg" },
      body: audioBuffer,
    })

    const transcription = await sttResponse.json()

    // Optionally send transcription back to Telegram
    if (chat_id) {
      await fetch(`https://api.telegram.org/bot${bot_token}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chat_id,
          text: `ðŸŽ¤ Transcription: ${transcription.data?.text || "Could not transcribe audio"}`,
        }),
      })
    }

    return NextResponse.json({
      success: true,
      message: "Audio transcribed successfully",
      transcription: transcription,
    })
  } catch (error) {
    return NextResponse.json(
      {
        error: "Failed to transcribe Telegram audio",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}

async function handleTelegramWebhook(request: NextRequest, params: any) {
  // Handle incoming Telegram webhook
  const { message } = params

  if (!message) {
    return NextResponse.json({ ok: true })
  }

  const responses = []

  // Handle text messages (convert to speech)
  if (message.text && message.text.startsWith("/speak ")) {
    const text = message.text.replace("/speak ", "")
    responses.push({
      action: "text_to_speech",
      text: text,
      chat_id: message.chat.id,
    })
  }

  // Handle voice messages (convert to text)
  if (message.voice) {
    responses.push({
      action: "speech_to_text",
      file_id: message.voice.file_id,
      chat_id: message.chat.id,
    })
  }

  return NextResponse.json({
    success: true,
    responses: responses,
  })
}

export async function GET() {
  return NextResponse.json({
    message: "Telegram Integration API",
    description: "Complete Telegram Bot integration for TTS and STT",
    actions: {
      text_to_speech: {
        description: "Convert text to speech and send to Telegram",
        parameters: ["text", "chat_id", "bot_token", "voice?", "format?"],
      },
      speech_to_text: {
        description: "Convert Telegram voice message to text",
        parameters: ["file_id", "bot_token", "chat_id?"],
      },
      webhook: {
        description: "Handle Telegram webhook events",
        parameters: ["message"],
      },
    },
    examples: {
      tts: 'curl -X POST -H "Content-Type: application/json" -d \'{"action":"text_to_speech","text":"Hello world","chat_id":"123456","bot_token":"YOUR_BOT_TOKEN"}\' /api/telegram-integration',
      stt: 'curl -X POST -H "Content-Type: application/json" -d \'{"action":"speech_to_text","file_id":"FILE_ID","bot_token":"YOUR_BOT_TOKEN","chat_id":"123456"}\' /api/telegram-integration',
    },
  })
}
